POST {{endpoint}}/blogposts
Content-Type: application/json

{
  "content": "Lorem ipsum..."
}

> {%
client.test("Blog Post invalid", () => {
  client.assert(response.status === 400);
});
%}

###
POST {{endpoint}}/blogposts
Content-Type: application/json

{
  "title": "test blog",
  "content": "Lorem ipsum..."
}

> {%
  client.test("BlogPost created", () => {
    client.assert(response.status === 201);
    client.assert(response.headers.valueOf("Location") !== undefined);
    client.assert(response.body['id'] !== undefined);
    client.assert(response.body['timestamp'] !== undefined);
  });
  client.global.set('postUrl', response.headers.valueOf("Location"));
  client.global.set('postId', response.body['id']);
%}

###
GET {{postUrl}}
Accept: application/json

> {%
  client.test("BlogPost found", () => {
    client.assert(response.status === 200);
    client.assert(response.body['title'] === 'test blog');
    client.assert(response.body['id'] === client.global.get('postId'));
  });
%}
###
GET {{postUrl}}/hashtags
Accept: application/json

> {%
  client.test("BlogPost Tags found, but empty", () => {
    client.assert(response.status === 200);
    client.assert(response.body.length == 0);
  });
%}
###
GET {{postUrl}}/hashtags/TEST
Accept: application/json

> {%
  client.test("BlogPost Tag assigned", () => {
    client.assert(response.status === 404);
  });
%}
###
PUT {{postUrl}}/hashtags/TEST
Content-Type: text/plain

> {%
  client.test("BlogPost Tag assigned", () => {
    client.assert(response.status === 201);
    client.assert(response.headers.valueOf("Location") === client.global.get('postUrl') + '/hashtags/TEST');
  });
%}
###
PUT {{postUrl}}/hashtags/TEST
Content-Type: text/plain

> {%
  client.test("BlogPost Tag assigned again", () => {
    client.assert(response.status === 204);
  });
%}
###
GET {{postUrl}}/hashtags/TEST
Accept: application/json

> {%
  client.test("BlogPost Tag assignment found", () => {
    client.assert(response.status === 200);
    client.assert(response.body['name'] === 'TEST');
  });
%}
###
DELETE {{postUrl}}/hashtags/TEST

> {%
  client.test("Hashtag assignment deleted", () => {
    client.assert(response.status === 204);
  });
%}
###
DELETE {{postUrl}}/hashtags/TEST

> {%
  client.test("Hashtag assignment already deleted", () => {
    client.assert(response.status === 404);
  });
%}
###
GET {{postUrl}}/hashtags/TEST
Accept: application/json

> {%
  client.test("BlogPost Tag assignment not existing anymore", () => {
    client.assert(response.status === 404);
  });
%}
###
PUT {{postUrl}}/hashtags/TEST
Content-Type: text/plain

> {%
  client.test("BlogPost Tag assigned", () => {
    client.assert(response.status === 201);
    client.assert(response.headers.valueOf("Location") === client.global.get('postUrl') + '/hashtags/TEST');
  });
%}
###
POST {{endpoint}}/authors
Content-Type: application/json
Accept: application/json

{
  "name": "John Doe"
}

> {%
  client.test("Author created", () => {
    client.assert(response.status === 201);
  });
  client.global.set('authorUrl', response.headers.valueOf("Location"));
  client.global.set('authorId', response.body['id']);
%}

###
PUT {{postUrl}}/author
Content-Type: text/plain

3fa85f64-5717-4562-b3fc-2c963f66afa6

> {%
  client.test("Author not assigned because it does not exist", () => {
    client.assert(response.status === 400);
  });
%}

###
PUT {{postUrl}}/author
Content-Type: text/plain

3fa85f

> {%
  client.test("Author not assigned because uuid is not valid", () => {
    client.assert(response.status === 400);
  });
%}

###
GET {{postUrl}}/author
Accept: application/json

> {%
  client.test("Author found", () => {
    client.assert(response.status === 404);
  });
%}

###
PUT {{postUrl}}/author
Content-Type: text/plain

{{authorId}}

> {%
  client.test("Author assigned", () => {
    client.assert(response.status === 201);
    client.assert(
      response.headers.valueOf("Location")
      ===
      client.global.get('postUrl') + '/author'
    );
  });
%}

###
PUT {{postUrl}}/author
Content-Type: text/plain

{{authorId}}

> {%
  client.test("Author assigned again", () => {
    client.assert(response.status === 204);
  });
%}

###
GET {{postUrl}}/author
Accept: application/json

> {%
  client.test("Author found", () => {
    client.assert(response.status === 200);
  });
%}

###
DELETE {{postUrl}}/author

> {%
  client.test("Author deleted", () => {
    client.assert(response.status === 204);
  });
%}

###
DELETE {{postUrl}}/author

> {%
  client.test("Author deleted again", () => {
    client.assert(response.status === 404);
  });
%}

###
GET {{postUrl}}/author
Accept: application/json

> {%
  client.test("Author found", () => {
    client.assert(response.status === 404);
  });
%}

###
PUT {{postUrl}}/author
Content-Type: text/plain

{{authorId}}

> {%
  client.test("Author assigned", () => {
    client.assert(response.status === 201);
    client.assert(
      response.headers.valueOf("Location")
      ===
      client.global.get('postUrl') + '/author'
    );
  });
%}

###
DELETE {{postUrl}}

> {%
  client.test("BlogPost deleted", () => {
    client.assert(response.status === 204);
  });
%}
###
DELETE {{postUrl}}

> {%
  client.test("BlogPost already deleted", () => {
    client.assert(response.status === 404);
  });
%}
###
GET {{postUrl}}/hashtags/TEST
Accept: application/json

> {%
  client.test("BlogPost Tag assignment not existing anymore", () => {
    client.assert(response.status === 404);
  });
%}

###
GET {{postUrl}}/author
Accept: application/json

> {%
  client.test("Author found", () => {
    client.assert(response.status === 404);
  });
%}
